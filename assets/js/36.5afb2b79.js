(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{346:function(a,e,t){a.exports=t.p+"assets/img/polymorphism.dbd91ee8.jpeg"},410:function(a,e,t){"use strict";t.r(e);var r=t(19),n=Object(r.a)({},(function(){var a=this,e=a.$createElement,r=a._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"다형성-polymorphism"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#다형성-polymorphism"}},[a._v("#")]),a._v(" 다형성(polymorphism)")]),a._v(" "),r("p",[r("em",[a._v("written by sohyeon, hyemin 💡")])]),a._v(" "),r("br"),a._v(" "),r("h2",{attrs:{id:"_1-다형성이란"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-다형성이란"}},[a._v("#")]),a._v(" 1. 다형성이란")]),a._v(" "),r("p",[a._v("객체지향개념에서 다형성이란 "),r("code",[a._v("여러 가지 형태를 가질 수 있는 능력")]),a._v("을 의미한다.")]),a._v(" "),r("p",[a._v("자바에서 조상클래스 타입의 참조변수로 자손클래스의 인스턴스를 참조할 수 있도록 하였다.")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("CaptionTV c = new CaptionTV();\nTV t = new CaptionTV();\n")])])]),r("p",[a._v("CaptionTV 인스턴스 2개를 생성하고, 참조변수 c와 t가 생성된 인스턴스를 하나씩 참조하도록 한다.")]),a._v(" "),r("p",[a._v("실제 인스턴스가 CaptionTV 타입이라 할지라도, 참조변수 t로는 CaptionTV 인스턴스의 모든 멤버를 사용할 수 없다.")]),a._v(" "),r("img",{attrs:{src:t(346),height:"200px",align:"center"}}),a._v(" "),r("p",[r("code",[a._v("둘 다 같은 타입의 인스턴스지만 참조변수의 타입에 따라 사용할 수 있는 멤버의 개수가 달라진다.")])]),a._v(" "),r("h5",{attrs:{id:"이처럼-조상타입의-참조변수로-자손타입의-인스턴스를-참조할-수-있지만-자손타입의-참조변수로-조상타입의-인스턴스를-참조할-수-없다"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#이처럼-조상타입의-참조변수로-자손타입의-인스턴스를-참조할-수-있지만-자손타입의-참조변수로-조상타입의-인스턴스를-참조할-수-없다"}},[a._v("#")]),a._v(" 이처럼 조상타입의 참조변수로 자손타입의 인스턴스를 참조할 수 있지만, 자손타입의 참조변수로 조상타입의 인스턴스를 참조할 수 없다.")]),a._v(" "),r("br"),a._v(" "),r("h2",{attrs:{id:"_2-참조변수의-형변환"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-참조변수의-형변환"}},[a._v("#")]),a._v(" 2. 참조변수의 형변환")]),a._v(" "),r("p",[a._v("기본형 변수와 같이 참조변수도 형변환이 가능하다. 단, "),r("code",[a._v("서로 상속관계에 있는 클래스")]),a._v("사이에서만 가능하다.")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("자손타입 -> 조상타입(Up-casting) : 형변환 생략가능.   // 자손타입의 참조변수를 조상타입의 참조변수로 변환하는 것\n자손타입 <- 조상타입(Down-casting) : 형변환 생략불가  // 조상타입의 참조변수를 자손타입의 참조변수로 변환하는 것\n")])])]),r("ul",[r("li",[r("p",[a._v("형변환은 "),r("code",[a._v("참조변수의 타입을 변환")]),a._v("하는 것이지 "),r("code",[a._v("인스턴스를 변환")]),a._v("하는 것은 아니기 때문에 "),r("code",[a._v("참조변수의 형변환은 인스턴스에 아무런 영향을 미치지 않는다.")])])]),a._v(" "),r("li",[r("p",[a._v("단지 참조변수의 형변환을 통해서, 참조하고 있는 인스턴스에서 사용할 수 있는 멤버의 범위(개수)를 조절하는 것이다.")])])]),a._v(" "),r("h4",{attrs:{id:"ex-예제"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ex-예제"}},[a._v("#")]),a._v(" ex) 예제")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v('class CastingTest1 {\n    public static void main(String args[]) {\n        Car car = null;                    // Car타입의 참조변수 car를 선언하고 null로 초기화한다.\n        FireEngine fe = new FireEngine();  // FireEngine 인스턴스를 생성하고 FireEngine 타입의 참조변수가 참조하도록 한다.\n        FireEngine fe2 = null;\n\n        fe.water();\n        car = fe;                          // car = (Car)fe;에서 형변환이 생략된 형태다. fe가 참조하고 있는 인스턴스의 주소가 car에 저장된다. \n        fe2 = (FireEngine)car;             // 자손타입 <- 조상타입, car에는 FireEngine인스턴스의 주소가 저장되어 있으므로 fe2에도 FireEngine인스턴스의 주소가 저장된다. car와는 달리, fe2는 FireEngine타입이므로 FireEngine인스턴스의 모든 멤버들을 사용할 수 있다.\n        fe2.water();\n    }\n}\n\nclass Car {\n    String color;\n    int door;\n\n    void drive() {\n        System.out.println("drive, Brrrr~");    \n    }\n    void stop() {\n        System.out.println("stop!!!");\n    }\n}\n\nclass FireEngine extends Car {\n    void water() {\n        System.out.println("water!!!");\n    }\n}\n')])])]),r("h4",{attrs:{id:"실행결과"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#실행결과"}},[a._v("#")]),a._v(" 실행결과")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("water!!!\nwater!!!\n")])])]),r("h4",{attrs:{id:"ex-예제-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ex-예제-2"}},[a._v("#")]),a._v(" ex) 예제")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("class CastingTest2 {\n    public static void main(String args[]) {\n        Car car = new Car();\n        Car car2 = null;\n        FireEngine fe = null;\n    \n        car.drive();\n        fe = (FireEngine) car;  // 컴파일은 가능하지만 실행 시 에러가 발생한다.\n        fe.drive();\n        car2 = fe;\n        car2.drive();\n    }\n}\n")])])]),r("h4",{attrs:{id:"실행결과-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#실행결과-2"}},[a._v("#")]),a._v(" 실행결과")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("drive, Brrrr~\njava.lang.ClassCastException: Car\nat CastingTest2.main(CastingTest2.java:8)\n")])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("서로 상속관계에 있는 타입간의 형변환은 양방향으로 자유롭게 수행될 수 있으나, 참조변수가 가리키는 인스턴스의 자손타입으로 형변환은 허용되지 않는다.\n그래서 참조변수가 가리키는 인스턴스의 타입이 무엇인지 확인하는 것이 중요하다.\n")])])]),r("br"),a._v(" "),r("h2",{attrs:{id:"reference-additional-resources"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#reference-additional-resources"}},[a._v("#")]),a._v(" Reference & Additional Resources")])])}),[],!1,null,null,null);e.default=n.exports}}]);