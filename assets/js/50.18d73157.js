(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{395:function(e,r,_){"use strict";_.r(r);var t=_(19),v=Object(t.a)({},(function(){var e=this,r=e.$createElement,_=e._self._c||r;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"mvc-패턴"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mvc-패턴"}},[e._v("#")]),e._v(" MVC 패턴")]),e._v(" "),_("p",[_("em",[e._v("written by sohyeon, hyemin 💡")])]),e._v(" "),_("br"),e._v(" "),_("h2",{attrs:{id:"_1-mvc-패턴이란"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-mvc-패턴이란"}},[e._v("#")]),e._v(" 1. MVC 패턴이란?")]),e._v(" "),_("p",[_("strong",[e._v("MVC")]),e._v("란, "),_("strong",[e._v("M")]),e._v("odel "),_("strong",[e._v("V")]),e._v("iew "),_("strong",[e._v("C")]),e._v("ontroller의 약자로 애플리케이션을 세가지 역할로 구분한 개발 방법론입니다.")]),e._v(" "),_("p",[e._v("간략하게 역할을 구분하자면 아래와 같습니다.")]),e._v(" "),_("p",[_("kbd",[_("img",{attrs:{src:"https://s3.ap-northeast-2.amazonaws.com/opentutorials-user-file/module/327/1262.png"}})])]),e._v(" "),_("ul",[_("li",[_("strong",[e._v("M")]),e._v("odel: 애플리케이션의 데이터, 자료")]),e._v(" "),_("li",[_("strong",[e._v("V")]),e._v("iew: 사용자에게 보여지는 부분")]),e._v(" "),_("li",[_("strong",[e._v("C")]),e._v("ontroller: Model과 View사이를 이어주는 역할")])]),e._v(" "),_("p",[e._v("이렇게 각자의 역할을 분리함으로서 유지 보수를 용이하게 하고 프로그램의 확장성과 유연성을 높일 수 있습니다.")]),e._v(" "),_("h3",{attrs:{id:"_1-1-web에-적용된-mvc-예시"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-web에-적용된-mvc-예시"}},[e._v("#")]),e._v(" 1-1. Web에 적용된 MVC 예시")]),e._v(" "),_("ol",[_("li",[e._v("사용자가 웹사이트에 접속한다. (Uses)")]),e._v(" "),_("li",[_("code",[e._v("Controller")]),e._v("는 사용자가 요청한 웹페이지를 서비스 하기 위해서 모델을 호출한다. (Manipulates)")]),e._v(" "),_("li",[_("code",[e._v("Model")]),e._v("은 데이터베이스나 파일과 같은 데이터 소스를 제어한 후에 그 결과를 리턴한다.")]),e._v(" "),_("li",[_("code",[e._v("Controller")]),e._v("는 "),_("code",[e._v("Model")]),e._v("이 리턴한 결과를 View에 반영한다. (Updates)")]),e._v(" "),_("li",[e._v("데이터가 반영된 "),_("code",[e._v("VIew")]),e._v("는 사용자에게 보여진다. (Sees)")])]),e._v(" "),_("h2",{attrs:{id:"_2-구성"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-구성"}},[e._v("#")]),e._v(" 2. 구성")]),e._v(" "),_("h3",{attrs:{id:"_2-1-model"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-model"}},[e._v("#")]),e._v(" 2-1. Model")]),e._v(" "),_("p",[_("code",[e._v("Model")]),e._v("은 프로그램에 사용되는 데이터를 의미하며"),_("br"),e._v("\n데이터베이스, 상수, 문자열과 같은 변수들, 비전 프로그램이라면 카메라 정보와 같은 것들이 해당됩니다.")]),e._v(" "),_("p",[_("code",[e._v("Model")]),e._v("에는 "),_("code",[e._v("View")]),e._v("나 "),_("code",[e._v("Controller")]),e._v("의 정보가 전혀 없고 정보만 반환하거나 설정합니다.")]),e._v(" "),_("h3",{attrs:{id:"_2-2-view"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-view"}},[e._v("#")]),e._v(" 2-2. View")]),e._v(" "),_("p",[_("code",[e._v("VIew")]),e._v("는 사용자에게 보여지는 UI적 요소들을 의미합니다."),_("br"),e._v("\n사용자가 제어하고 데이터를 확인할 수 있는 영역입니다.")]),e._v(" "),_("p",[_("code",[e._v("VIew")]),e._v("에서는 별도의 데이터를 보관하지 않고 입력받고 출력해주는 모든 데이터는 "),_("code",[e._v("Model")]),e._v("을 활용하게 됩니다.")]),e._v(" "),_("h3",{attrs:{id:"_2-3-controller"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-controller"}},[e._v("#")]),e._v(" 2-3. Controller")]),e._v(" "),_("p",[_("code",[e._v("Controller")]),e._v("는 "),_("code",[e._v("Model")]),e._v("과 "),_("code",[e._v("View")]),e._v("를 이어주는 다리 역할을 수행합니다."),_("br"),e._v("\n사용자가 "),_("code",[e._v("View")]),e._v("에서 어떤 행동을 했을 때 그 내부적인 처리는 "),_("code",[e._v("Controller")]),e._v("에서 관리하게 됩니다.")]),e._v(" "),_("h2",{attrs:{id:"_3-장단점"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-장단점"}},[e._v("#")]),e._v(" 3. 장단점")]),e._v(" "),_("h3",{attrs:{id:"_3-1-장점"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-장점"}},[e._v("#")]),e._v(" 3-1. 장점")]),e._v(" "),_("ul",[_("li",[e._v("애플리케이션 확장성 증가")]),e._v(" "),_("li",[e._v("애플리케이션 유연성 증가")]),e._v(" "),_("li",[e._v("각자의 목적에 맞는 분리된 코드를 통해 중복 최소화")])]),e._v(" "),_("h3",{attrs:{id:"_3-2-단점"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-단점"}},[e._v("#")]),e._v(" 3-2. 단점")]),e._v(" "),_("ul",[_("li",[_("p",[_("code",[e._v("View")]),e._v("와 "),_("code",[e._v("Model")]),e._v("의 의존성으로 인해 구조가 복잡해질 수 있다.")]),e._v(" "),_("p",[e._v("Model은 다수의 View를 가질 수 있고 반대로 Controller를 통해 한 View에 연결되는 Model도 여러개가 될 수  있다."),_("br"),e._v("\n이런 관계는 View와 Model의 의존성을 높이게 된다. 좋은 설계로 의존성을 줄일 수는 있겠지만"),_("br"),e._v("\nController에 다수의 Model과 View가 연결되는 복잡한 상황이 유발 되는 상황을 피하기는 쉽지않다.")]),e._v(" "),_("p",[e._v("결국, MVC 규모가 비대해지고 복잡해지며 새 기능을 추가할 때마다 의존성을 일일이 해결해야 하는 상황이 오게 된다."),_("br"),e._v("\n이런 형태의 MVC를 MassiveViewController라고 부른다. MVC의 한계를 표현하는 용어이기도 하다.")])])]),e._v(" "),_("h2",{attrs:{id:"_4-결론"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-결론"}},[e._v("#")]),e._v(" 4. 결론")]),e._v(" "),_("p",[e._v("물론 MVC가 갖는 명료한 장점도 있지만,"),_("br"),e._v("\nController가 View와 강한 의존성을 가짐으로서 발생하는 한계점을 인지하고"),_("br"),e._v("\n적절한 상황에 MVC를 적용할 수 있어야 한다."),_("br"),e._v("\n또한 MVC로 부터 파생된 다른 패턴들을 활용하는 방안도 고민해 보아야 한다.")]),e._v(" "),_("h2",{attrs:{id:"reference-additional-resources"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#reference-additional-resources"}},[e._v("#")]),e._v(" Reference & Additional Resources")]),e._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://www.opentutorials.org/course/697/3828",target:"_blank",rel:"noopener noreferrer"}},[e._v("MVC 디자인 패턴"),_("OutboundLink")],1)]),e._v(" "),_("li",[_("a",{attrs:{href:"https://velog.io/@ljinsk3/Concept-MVC-Pattern",target:"_blank",rel:"noopener noreferrer"}},[e._v("MVC 패턴"),_("OutboundLink")],1)]),e._v(" "),_("li",[_("a",{attrs:{href:"https://luckygg.tistory.com/182",target:"_blank",rel:"noopener noreferrer"}},[e._v("[Design Pattern] MVC(Model-View-Controller) 패턴 이야기 #1"),_("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=v.exports}}]);