(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{304:function(t,a,s){t.exports=s.p+"assets/img/big-o.6e1c2d2f.jpg"},305:function(t,a,s){t.exports=s.p+"assets/img/big-o2.ae32a862.jpg"},379:function(t,a,s){"use strict";s.r(a);var n=s(19),_=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"시간복잡도와-big-o-표기법-time-complexity-big-o"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#시간복잡도와-big-o-표기법-time-complexity-big-o"}},[t._v("#")]),t._v(" 시간복잡도와 Big-O 표기법 (Time Complexity & Big-O)")]),t._v(" "),n("p",[n("em",[t._v("written by sohyeon, hyemin 💡")])]),t._v(" "),n("br"),t._v(" "),n("h2",{attrs:{id:"_1-알고리즘의-분석과-수행시간"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-알고리즘의-분석과-수행시간"}},[t._v("#")]),t._v(" 1. 알고리즘의 분석과 수행시간")]),t._v(" "),n("h3",{attrs:{id:"_1-1-알고리즘의-분석"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-알고리즘의-분석"}},[t._v("#")]),t._v(" 1-1. 알고리즘의 분석")]),t._v(" "),n("p",[t._v("알고리즘을 실행하는데 필요한 자원을 예측하는 것"),n("br"),t._v("\n메모리, 통신대역, 하드웨어와 같은 자원이 측정의 관심대상이 되기도 하지만"),n("br"),t._v("\n대부분의 경우 측정대상은 계산시간이다.")]),t._v(" "),n("h4",{attrs:{id:"수행시간"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#수행시간"}},[t._v("#")]),t._v(" 수행시간")]),t._v(" "),n("p",[t._v("기본연산개수 또는 실행된 단계의 횟수"),n("br"),t._v("\n(즉, 알고리즘의 수행시간은 각 명령문 수행시간의 합이다.)")]),t._v(" "),n("h4",{attrs:{id:"알고리즘-수행시간"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#알고리즘-수행시간"}},[t._v("#")]),t._v(" 알고리즘 수행시간")]),t._v(" "),n("p",[t._v("주어진 문제의 입력크기가 다양하기 때문에"),n("br"),t._v(" "),n("code",[t._v("최악")]),t._v(", "),n("code",[t._v("최상")]),t._v(", "),n("code",[t._v("평균")]),t._v("적인 경우 총 3개의 case를 가질 수 있는데"),n("br"),t._v("\n우리는 "),n("code",[t._v("최악")]),t._v("의 경우에 주로 관심을 둘 것이다.")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("최악의 경우는 모든 입력에 대한 수행시간의 상한이 되며,\n이보다 더 나쁜 경우는 존재하지 않고 최악의 경우가 빈번하기도 함  \n")])])]),n("h3",{attrs:{id:"_1-2-시간복잡도"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-시간복잡도"}},[t._v("#")]),t._v(" 1-2. 시간복잡도")]),t._v(" "),n("p",[t._v("가장 널리 사용되는 알고리즘의 수행시간 기준"),n("br"),t._v("\n알고리즘이 실행되는 동안 수행하는 기본적인 연산의 수를 입력의 크기에 대한 함수로 표현")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("<시간 복잡도와 입력 크기의 관계>\n\n시간 복잡도가 높다는 것은 입력의 크기가 증가할 때 알고리즘의 수행 시간이 증가한다는 의미이다.  \n하지만 시간 복잡도가 낮다고 해서 언제나 더 빠르게 동작하는 것은 아니다.  \n입력의 크기가 작을 때는 시간 복잡도가 높은 알고리즘이 더 빠르게 동작할 수도 있다.\n")])])]),n("p",[t._v("시간 복잡도를 표기하기 쉽게하기 위해 증가차수, 점근적 효율성을 기준으로 알고리즘의 수행시간을 나타낼 것이다.")]),t._v(" "),n("h4",{attrs:{id:"증가차수"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#증가차수"}},[t._v("#")]),t._v(" 증가차수")]),t._v(" "),n("p",[t._v("더 단순하게 추상화하여 수행시간에 대한 증가비율 또는 증가차수를 이용하는 것"),n("br"),t._v("\n차수가 가장 높은 항만 고려하고 상수 계수는 무시한다.")]),t._v(" "),n("h4",{attrs:{id:"점근적-효율성"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#점근적-효율성"}},[t._v("#")]),t._v(" 점근적 효율성")]),t._v(" "),n("p",[t._v("입력크기가 극한으로 증가할 때 어떤 알고리즘의 수행시간이 어떻게 증가하는지에 관심을 두고"),n("br"),t._v("\n점근적으로 더 효율적인 알고리즘이 가장 좋은 선택이 되는 것")]),t._v(" "),n("p",[t._v("점근적 표기 방식에 따라,")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("최상의 경우 : 오메가 표기법 (Big-Ω Notation)")])]),t._v(" "),n("li",[n("p",[t._v("평균의 경우 : 세타 표기법 (Big-θ Notation)")])]),t._v(" "),n("li",[n("p",[t._v("최악의 경우 : 빅오 표기법 (Big-O Notation)")])])]),t._v(" "),n("p",[t._v("세가지 방식으로 시간복잡도를 나타내는데 사용한다."),n("br"),t._v("\n이 중에서도 최악의 경우인 빅오를 사용해 최악의 경우를 판단하면 평균과 가까운 성능으로 예측하기 쉽다.")]),t._v(" "),n("h2",{attrs:{id:"_2-빅오-표기법-big-o-notation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-빅오-표기법-big-o-notation"}},[t._v("#")]),t._v(" 2. 빅오 표기법(Big-O Notation)")]),t._v(" "),n("p",[t._v("빅오 표기법은 점근적 상한을 나타내는 것이다."),n("br"),t._v("\n입력의 크기가 극한으로 증가할때 최고 차항의 차수가 가장 영향을 많이 끼치기 때문에"),n("br"),t._v("\n가장 높은 항을 제외하고 다른 항은 다 제거하는 표기법이다.")]),t._v(" "),n("p",[t._v("즉, 시간복잡도에 가장 큰 영향을 미치는 차항으로 시간복잡도를 나타내는 표기법이다.")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("T(n)=n^2+2n+9 \t    # O(n2)\n\nT(n)=n^4+n^3+n^2+1  # O(n4)\n\nT(n)=5n^3+3n^2+2n+1 # O(n3)\n")])])]),n("p",[t._v("최고 차항을 제외하고 다 제거하고 계산하기 때문에 계산이 매우 간단하다."),n("br"),t._v("\n알고리즘의 시간복잡도는 반복문에 의해 결정되므로 반복문이 몇번 실행되는지 보면 된다.")]),t._v(" "),n("h4",{attrs:{id:"예시"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#예시"}},[t._v("#")]),t._v(" 예시)")]),t._v(" "),n("div",{staticClass:"language-Java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("N")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" k"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("N")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" k"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("위와 같은 경우 N번 수행되는 반복문이 두번 중첩되어있기 때문에 시간복잡도는 "),n("code",[t._v("O(N^2)")]),t._v("이다.")]),t._v(" "),n("h3",{attrs:{id:"_2-1-big-o-표기법의-종류와-성능"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-big-o-표기법의-종류와-성능"}},[t._v("#")]),t._v(" 2-1. Big-O 표기법의 종류와 성능")]),t._v(" "),n("h3",{attrs:{id:"_1-big-o-표기법의-종류"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-big-o-표기법의-종류"}},[t._v("#")]),t._v(" 1) Big-O 표기법의 종류")]),t._v(" "),n("img",{attrs:{src:s(304),width:"700px"}}),t._v(" "),n("ul",[n("li",[n("p",[t._v("O(1) - (상수) Constant")]),t._v(" "),n("ul",[n("li",[t._v("입력되는 데이터양과 상관없이 일정한 실행 시간을 가진다.")]),t._v(" "),n("li",[t._v("알고리즘이 문제를 해결하는데 오직 한 단계만 거친다.")])])]),t._v(" "),n("li",[n("p",[t._v("O(logN) Logarithmic")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("데이터양이 많아져도, 시간이 조금씩 늘어난다.")])]),t._v(" "),n("li",[n("p",[t._v("시간에 비례하여, 탐색 가능한 데이터양이 2의 n승이 된다.")])]),t._v(" "),n("li",[n("p",[t._v("문제를 해결하는데 필요한 단계들이 연산마다 특정 요인에 의해 줄어든다.")])]),t._v(" "),n("li",[n("p",[t._v("만약 입력 자료의 수에 따라 실행시간이 이 log N 의 관계를 만족한다면\nN이 증가함에 따라 실행시간이 조금씩 늘어난다.")])]),t._v(" "),n("li",[n("p",[t._v("이 유형은 주로 커다란 문제를 일정한 크기를 갖는 작은 문제로 쪼갤때 나타나는 유형이다.")])]),t._v(" "),n("li",[n("p",[t._v("예시: Binary Search")])])])]),t._v(" "),n("li",[n("p",[t._v("O(N) Linear")]),t._v(" "),n("ul",[n("li",[t._v("데이터양에 따라 시간이 정비례한다.")]),t._v(" "),n("li",[t._v("linear search, for 문을 통한 탐색을 생각하면 되겠다.")])])]),t._v(" "),n("li",[n("p",[t._v("O(N log N) log linear")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("데이터양이 N배 많이 진다면, 실행 시간은 N배 보다 조금더 많아 진다. (정비례 하지 않는다)")])]),t._v(" "),n("li",[n("p",[t._v("이 유형은 커다란 문제를 독립적인 작은 문제로 쪼개어 각각에 대해 독립적으로 해결하고,\n나중에 다시 그것들을 하나로 모으는 경우에 나타난다.")])]),t._v(" "),n("li",[n("p",[t._v("N이 두배로 늘어나면 실행 시간은 2배보다 약간 더 많이 늘어난다.")])]),t._v(" "),n("li",[n("p",[t._v("예시: 퀵소트, 머지소트")])])])]),t._v(" "),n("li",[n("p",[t._v("O(N^2) Quadratic")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("데이터양에 따라 걸리는 시간은 제곱에 비례한다. (효율이 좋지 않음, 사용하면 안된다)")])]),t._v(" "),n("li",[n("p",[t._v("이 유형은 이중루프내에서 입력 자료를 처리 하는 경우에 나타난다.")])]),t._v(" "),n("li",[n("p",[t._v("N값이 큰값이 되면 실행 시간은 감당하지 못할 정도로 커지게 된다.")])]),t._v(" "),n("li",[n("p",[t._v("문제를 해결하기 위한 단계의 수는 입력값 n의 제곱")])]),t._v(" "),n("li",[n("p",[t._v("예시: 2중 for 문을 사용하는 버블소트, 삽입정렬(insertion sort)")])])])])]),t._v(" "),n("h3",{attrs:{id:"_2-성능비교"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-성능비교"}},[t._v("#")]),t._v(" 2) 성능비교")]),t._v(" "),n("img",{attrs:{src:s(305),width:"500px"}}),t._v(" "),n("p",[t._v("성능 순서 : O(1)<O(logn)<O(n)<O(nlogn)<O(n2)<O(n3)<O(2n)")])])}),[],!1,null,null,null);a.default=_.exports}}]);